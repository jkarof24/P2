library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
library(lmtest)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
library(lmtest)
library(gridExtra)
#read data
data <- read.csv("auto-mpg.csv", na.strings = ".")
#calculet the NA-%
na_percentage <- function(column) {
sum(is.na(column)) / length(column) * 100
}
#print the NA-%
print(sapply(data, na_percentage))
# Convert horsepower to numeric, coercing non-numeric values to NA
data$horsepower <- as.numeric(data$horsepower)
# Remove rows with any NA values
data <- data %>% na.omit()
"numeric_data <- data %>% select_if(is.numeric)
# Beregn korrelationer og smelt til format for ggplot2
data_korrelationer <- melt(cor(numeric_data, use = "complete.obs"))
ggplot(data_korrelationer, aes(x = Var1, y = Var2, fill = abs(value))) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 4) +
scale_fill_gradient(low = "white", high = "red", limit = c(0, 1), name="|Correlation|") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Correlation Matrix Heatmap", x = "", y = "")
" Lav scatter plots for hver kolonne mod 'mpg'
scatter_plots <- lapply(names(numeric_data), function(col) {
ggplot(numeric_data, aes_string(x = col, y = "mpg")) +
#make df with P_Value
bp_df <- data.frame(Variable = names(bp_results), P_Value = bp_results)
print(bp_df)
arrange scatter plots and Breusch prage plot
do.call(grid.arrange, c(scatter_plots, ncol = 3))
"Lav histogrammer og density plots med mean og SD
plots <- lapply(names(numeric_data), function(col) {
n_bins <- ceiling(log2(length(numeric_data[[col]])) + 1)
mean_value <- mean(numeric_data[[col]])
sd_value <- sd(numeric_data[[col]])
ggplot(numeric_data, aes_string(x = col)) +
geom_histogram(aes(y = ..density..), bins = n_bins, fill = "blue", color = "black") +
"Lav histogrammer og density plots med mean og SD
plots <- lapply(names(numeric_data), function(col) {
n_bins <- ceiling(log2(length(numeric_data[[col]])) + 1)
mean_value <- mean(numeric_data[[col]])
sd_value <- sd(numeric_data[[col]])
ggplot(numeric_data, aes_string(x = col)) +
geom_histogram(aes(y = ..density..), bins = n_bins, fill = "blue", color = "black") +
"Lav histogrammer og density plots med mean og SD
plots <- lapply(names(numeric_data), function(col) {
n_bins <- ceiling(log2(length(numeric_data[[col]])) + 1)
mean_value <- mean(numeric_data[[col]])
sd_value <- sd(numeric_data[[col]])
ggplot(numeric_data, aes_string(x = col)) +
geom_histogram(aes(y = ..density..), bins = n_bins, fill = "blue", color = "black") +
library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
library(lmtest)
library(gridExtra)
#read data
data <- read.csv("auto-mpg.csv", na.strings = ".")
#calculet the NA-%
na_percentage <- function(column) {
sum(is.na(column)) / length(column) * 100
}
#print the NA-%
print(sapply(data, na_percentage))
# Convert horsepower to numeric, coercing non-numeric values to NA
data$horsepower <- as.numeric(data$horsepower)
---
title: "Maximum likelihood estimation and resampling techniques"
---
title: "Maximum likelihood estimation and resampling techniques"
---
title: "Maximum likelihood estimation and resampling techniques"
trees <- read.delim("https://asta.math.aau.dk/datasets?file=trees.txt")
head(trees)
loglik_normal <- function(theta) {
alpha <- theta[1]
beta <- theta[2]
sigma <- theta[3]
mu <- alpha + beta * trees$Girth
y<-trees$Volume
fy<-dnorm(y , mean = mu, sd = sigma)
sum(log(fy))
}
loglik_normal(c(10, 1, 2))
optim((c(10, 1, 2)),loglik_normal,control=list(fnscale=-1))
loglik_normal <- function(theta) {
alpha <- theta[1]
beta <- theta[2]
mu <- alpha + beta * trees$Girth
y<-trees$Volume
sum((y-mu)^2)
}
loglik_normal(c(10, 1))
optim(c(10, 1), loglik_normal)
summary(lm(Volume~Girth, data=trees))
library(ISLR) # Remember that this package must be installed
head(Credit)
summary(lm(Balance~Rating, data=Credit))
library(boot)
model_coef_boot <- function(data, index){
coef(lm(Balance ~ Rating, data = Credit, subset = index))
}
boot <- boot(Credit, model_coef_boot, R = 1000)
boot
m0 <- lm(Balance~Rating, data=Credit)
res_bootstrap_coefs <- replicate(1000, {
new_y <- m0$fitted.values + sample(m0$residuals, replace = TRUE)
coef(lm(new_y ~ Credit$Rating))
})
apply(res_bootstrap_coefs, 1, sd)
boot <- boot(Credit, model_coef_boot, R = 1000)
boot
library(caret)
library(caret)
library(caret)
summary(lm(Volume~Girth, data=trees))
summary(lm(Volume~Girth, data=trees))
summary(lm(Volume~Girth, data=trees))
library(caret)
install.packages("future")
library(caret)
